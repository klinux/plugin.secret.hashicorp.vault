version: '2.2'

#define docker containers as services
services:
  #create a DNS service which also forwards lookups to consul DNS
  dnsmasq: &dnsmasq
    image: storytel/dnsmasq
    init: true
    command:
      - /bin/sh
      - -c
      - |
        set -ex
        [ -d /consul ] || mkdir -p /consul/config /consul/data
        [ -f /consul/config/dnsmasq.json ] || echo '{"service": {"name": "dnsmasq", "tags": [], "port": 53}}' > /consul/config/dnsmasq.json
        type -p curl || (
          until apk update; do sleep 3; done
          until apk add curl bind-tools; do sleep 3; done
        )
        grep consul /etc/group || addgroup -g 8000 -S consul
        grep consul /etc/passwd || adduser -u 8000 -G consul -h /consul -S consul
        type -p consul || (
          cd /usr/local/bin
          until echo 'f97996296ef3905c38c504b35035fb731d3cfd9cad129c9523402a4229c709c5  consul_1.2.3_linux_amd64.zip' | sha256sum -c -; do
            curl -LO https://releases.hashicorp.com/consul/1.2.3/consul_1.2.3_linux_amd64.zip
            sleep 3
          done
          unzip consul_1.2.3_linux_amd64.zip
          chmod 755 consul
          rm consul_1.2.3_linux_amd64.zip
        )
        type -p consul-template || (
          cd /usr/local/bin
          until curl -L https://releases.hashicorp.com/consul-template/0.19.5/consul-template_0.19.5_linux_amd64.tgz | tar -xz; do
            sleep 3
          done
        )
        chown -R consul. /consul
        su - -s /bin/sh consul -c /bin/sh -c 'nohup consul agent -join consul -config-dir=/consul/config -data-dir=/consul/data &'
        # consul-template will automatically update dnsmasq configuration and
        # restart the service based on available consul cluster DNS servers
        echo '{{range service "consul"}}server=/consul.service.consul/{{.Address}}#8600' >> /consul/consul-dns.tpl
        echo '{{end}}' >> /consul/consul-dns.tpl
        nohup /bin/sh -c 'sleep 30; while true; do consul-template -template=/consul/consul-dns.tpl:/etc/dnsmasq/consul.conf:"consul lock -name service/dnsmasq -shell reload killall dnsmasq" -retry 30s; sleep 5; done' &
        # end consul-template template
        set +e
        while true; do
          sleep 1
          CONSUL_IP="`dig +short consul | tail -n1`"
          # add --log-queries for more verbosity
          dnsmasq --no-daemon --server=/consul/"$${CONSUL_IP}"#8600
        done
    cap_add:
      - NET_ADMIN
    networks:
      internal:
        ipv4_address: 172.16.238.2


  dnsmasq-secondary:
    <<: *dnsmasq
    networks:
      internal:
        ipv4_address: 172.16.238.3

  consul:
    image: 'consul'
    init: true
    command: 'agent -server -bootstrap-expect 1 -disable-host-node-id -client 0.0.0.0 -ui'
    healthcheck:
      test: ['CMD', '/bin/sh', '-c', 'curl -sfLo /dev/null http://127.0.0.1:8500/v1/health/node/$$HOSTNAME']
    scale: 1
    networks:
      - internal
    ports:
      - "8500:8500"
    dns:
      - 172.16.238.2
      - 172.16.238.3
    depends_on:
      - dnsmasq

  consul-worker:
    image: 'consul'
    init: true
    entrypoint: ''
    command:
      - /bin/sh
      - -c
      - |
        set -ex
        until apk update; do sleep 3; done
        until apk add bind-tools; do sleep 3; done
        until dig +short consul.service.consul; do sleep 1; done
        docker-entrypoint.sh agent -server -join consul.service.consul -disable-host-node-id -client 0.0.0.0 -ui
    scale: 2
    networks:
      - internal
    dns:
      - 172.16.238.2
      - 172.16.238.3
    depends_on:
      consul:
        condition: service_healthy


  vault:
    image: 'vault'
    init: true
    #exports work around vault bug https://github.com/hashicorp/vault/issues/3866
    #IP is the IP address of the default networking route
    #$$ escapes in "$" in docker-compose string interpolation
    command:
      - "sh"
      - "-c"
      - |
        set -ex
        export IP=$$(ip -o ro get $$(ip ro | awk '$$1 == "default" { print $$3 }') | awk '{print $$5}')
        export VAULT_API_ADDR="http://$${IP}:8200" VAULT_CLUSTER_ADDR="https://$${IP}:8201"
        exec vault server -config=/vault/config
    #set scale: 3 for HA configuration
    scale: 1
    environment:
      VAULT_ADDR: 'http://127.0.0.1:8200'
      VAULT_LOCAL_CONFIG: '{"backend": {"consul": {"address": "consul:8500", "path":"vault", "scheme": "http"}}, "ui": true, "listener": {"tcp":{"address": "0.0.0.0:8200","tls_disable":"1"}}, "default_lease_ttl": "168h", "max_lease_ttl": "720h"}'
    cap_add:
      - IPC_LOCK
    networks:
      - internal
    ports:
      - "8200:8200"
    dns:
      - 172.16.238.2
      - 172.16.238.3
    depends_on:
      - consul-worker

networks:
  internal:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24